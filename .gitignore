
TechAcademy
Unityコース
Lesson3
バージョン管理

1. はじめに

これまでのレッスンでは、Unityの基本理解とサンプルプロジェクトを使って実際に遊び、Unityの画面構成などを学習しました。
今後、本格的にゲームアプリの開発を行っていくにあたって、バージョン管理をしていくことも重要な作業の1つですので、このLessonで学習していきましょう。

バージョン管理でメジャーなものとしてGitがあります。これはプログラムのソースコードなど変更履歴の記録・追跡を可能にした管理システムです。ここではGitの高機能クライアントツールであるSourceTreeの使い方を学び、Gitを使ったバージョン管理の第一歩としましょう。
Gitにはリモートリポジトリ・ローカルリポジトリ（後述）を使い分けて開発を行っていきますが、このリモートリポジトリに当たる部分を提供するGitHubというサービスがあります。これらのツールを連携させてバージョン管理を行いましょう。

用意されている課題もGitHubへプッシュ（後述）することで、メンターに見てもらえるようになっています。もちろん、理解が難しかったり、更に深い話を聞きたい場合にはメンターに質問して解決しておきましょう。

2. ゲーム開発におけるバージョン管理

ファイルやプロジェクトを何度も更新していくなかで、必ず管理したいのがファイルの変更履歴です。
ゲーム開発を進めていくと、ファイルやプロジェクトを編集前に戻したい時や、チームで1つのプロジェクトを開発している際に作業履歴が残っていないと一度保存したものを元に戻すことが難しくなりますし、すぐに物事が解決できない状態が続いてしまう可能性もあります。
Webデザイナーを含め、チームで開発をするようになると誰がどのファイルをいつ変更したのか管理していかなければ、いつの間にか意図しなかった変更が入り込んでしまう可能性もあります。

そのため、ファイルの変更履歴の保存や、チームでの開発を円滑に進めていくには、バージョン管理をしっかりと行う必要があります。

2.1 ファイル名でのバージョン管理

皆さんはプロジェクト内のファイルのバージョン管理をどのように行っているでしょうか。一般的にはファイル名に日付などを記載し、バージョン管理されている方も多いと思います。

index.html
index.html.backup
index.html.backup20160101
index.html.backup20160101_01
index.html.backup20160101_02
上記のようなバージョン管理を行う人が多いのではないでしょうか。もちろん、ちょっとしたものなら良いのですが、これがindex.htmlだけでなければ、それだけ数が増えていき、現行バージョンのファイルを探すのに手間がかかったりしてしまいます。

2.2 コメントでのバージョン管理

<!-- 2016/03/19 文言修正 <p>お願いします。</p> -->
<!-- 2016/03/20 文言修正 <p>よろしくお願いします。</p> -->
<p>どうぞよろしくお願いします！</p>
このようにファイルの中に変更履歴を残すためにコメントでバージョン管理を行っている人も多いのではないでしょうか。重要でないコメントが多くなってくると、それだけ読みづらくなります。

そこで、こういったバージョン管理をファイル名やコメントで行わずに、バージョン管理用のツールを使うことが主流となりました。

3. Gitの登場

バージョン管理ツールとして、有名なのがGitです。

Git
GitはLinuxというサーバ用途として用いられるOSの開発をするなかで、バージョン管理ツールが必要となり制作されたものです。今ではLinuxプロジェクトのみに限らず、多くの開発現場でGitが使われています。

ファイルやプロジェクトを好きな時に更新履歴として保存しておくことができ、編集済みのファイルやプロジェクトを過去の状態に戻したり、変更した箇所の差分を表示することもできます。

3.1 分散型である

バージョン管理システムはいくつかありますが、大きく2つに分けると集中型と分散型があります。Gitは分散型のバージョン管理システムです。

例えば、集中型のバージョン管理システムで有名なものにはSNV（Subversion：サブバージョン）というものがあります。この集中型のシステムは、基本的にリポジトリは1つのみ配置されます。開発に携わる人はこの1つのリポジトリから最新情報を取得して、編集が終わればそのリポジトリに反映します。このため、リポジトリが置かれたマシンに接続できない状況では、最新のデータを取得できなかったり、編集したコード・変更履歴をリポジトリに反映できないということになってしまいます。また、万が一、そのリポジトリが破損した場合は、復旧が難しくなる恐れもあります。

分散型では、それぞれの端末ごとにローカルリポジトリを作成し、編集・変更などを行う際にはローカルリポジトリにコミットします。
集中型が一つの中央リポジトリで管理されるのに対し、分散型は複数のリポジトリが作成されるので分散型と呼ばれます。自分の端末に作成したローカルリポジトリには、いつでも細かな単位でコミットすることが可能です。
また、複数のリポジトリが作成されることで、どこかのリポジトリが破損した場合にも復旧することが容易になります。

4. Gitを使ったバージョン管理

それではGitを使ったバージョン管理を学んでいきましょう。

ここではなんとなく全体像を掴むことができれば問題ありません。実際にバージョン管理をするなかで全体像が見えなくなってしまった時に再度読み返してみるとさらに理解が深まるでしょう。

Gitのようなバージョン管理システムは、ファイル変更に対して、下記のような情報を付加して変更履歴として記録することができます。

いつ
誰が
どこを
どのように編集・変更をしたのか
これによって、編集したファイルを過去の状態に戻したり、どこを編集したかなどの差分を表示したりすることができます。
バージョン管理システムを使うメリットとして

ファイルを変更する際に、バックアップファイルを作成する必要がない
変更する前のファイルの内容にいつでも戻れるので、安心してファイルを変更できる
複数人でファイルを変更したり、共同開発を行うことができる
などがあります。

Gitはバージョン管理システムの中でも特に使われているものであり、現在、オープンソースプロジェクト（Linux、Ruby on Railsなど）や、Webサービス（Twitter、クックパッドなど）の多くの開発現場で採用されています。

4.1 リポジトリ

バージョン管理をするには、1つ1つのバージョンの情報（いつ、誰が、どこを、どのように変更したか）を保存しておく必要があります。

その保存先のことをリポジトリと呼びます。リポジトリでは、バージョン情報の履歴が保存されています。変更履歴を管理したいプロジェクトフォルダなどをリポジトリの管理下に置くことで、そのプロジェクトフォルダ内のファイルの変更履歴を記録することができます。

また、リポジトリには2つ種類があります。

ローカルリポジトリ
リモートリポジトリ
ローカルリポジトリは、実際にバージョン管理下で作業を行うリポジトリのことで、自分のPCなどで（Webサービスを利用する場合もあります）作成されるリポジトリのことを言います。
リモートリポジトリは、チームでのリポジトリ共有やバックアップを目的として作られるネットワーク先のリポジトリのことを言います。


リモートリポジトリとローカルリポジトリの概念図

4.2 コミット

Gitでは、1つ1つのバージョン（変更履歴）のことを、コミットと呼びます。また、コミットを作成することをコミットすると言います。

1つ1つのコミットには様々な情報が入っています。特に下記の5つが重要です。

リビジョン（1e010f4572625f3741a306b8e996cのような値）
コミットした人や日時
コミットしたときのファイル内容
コミットメッセージ
1つ前のコミットのリビジョン
リビジョンは、コミットのバージョン番号のことでコミットを一意に指定できるIDのような役割を果たします。
コミットした人や日時も記録されるので、誰がいつコミットを行ったのかいつでも確認できます。
コミットしたときのファイル内容がコミット情報に含まれているので、ファイルを元に戻したい場合やどんな変更を施したのかを後からでも確認できます。
コミットメッセージは、コミットするときに必須のメッセージで、どういった内容の変更をコミットするのか簡単なメッセージにまとめて書いておきます。
更に、1つ前のコミットのリビジョンを持っているので、自分がどのコミットから作られたコミットなのかを確認することができます。

リポジトリ内では、1つ1つのコミットが自分より1つ前のコミットのリビジョンを持っているので、コミットが連なるように変更履歴を管理できているのです。


リポジトリ内のコミットの概念図

4.3 プッシュ

プッシュ(push)とは、ローカルリポジトリの変更履歴（コミットの積み重ね）をリモートリポジトリに反映させることです。
リモートリポジトリに反映させることで、チームの人たちと最新の開発状況や変更履歴などを共有することができます。

基本的なGitの作業の流れは下記のようになります。

リポジトリを作成・複製する
ファイルの作成・編集を行う
ファイルの作成・変更・削除をステージングに追加する
変更結果をローカルリポジトリにコミットする
ローカルリポジトリをプッシュしてリモートリポジトリへ反映させる
1の作成は初回のみ 行い、2から5を繰り返し ます。
基本的に小さい作業の単位でコミットを行い、ある程度作業がひと段落した時にプッシュをするのが一般的です。コミットの作業がわかりやすいようにコミットメッセージを残しておくと、ログを追っていく時に役立ちます。

変更されたファイルをコミットすることで、ローカルリポジトリに変更を登録することができるのですが、その前に変更されたファイルの中でもどのファイルをコミットに含めるかを選ぶ中間地点があります。それがインデックスです。インデックスはステージングエリアとも呼ばれます。本カリキュラムでは、ステージ（ステージング・ステージエリア）という言葉を使って進めていきます。

ファイルを変更してコミットされるまで、下図のような流れとなります。

git_index_figure.png
ワークツリーとインデックスとリポジトリまでの概念図

4.4 GitHubとは

GitHubとは、現在最もポピュラーなGitホスティングサイトです。GitHubでは、1つのプロジェクトとしてリモートリポジトリを作成し、プロジェクトのバージョン管理をチーム内で共有、バックアップ、公開することができます。更に、Issues（課題管理）やWikiなどのプロジェクト管理機能も充実しています。

GitHub


GitHubのリモートリポジトリの画面

非公開プロジェクトやエンタープライズ向けプロジェクトも管理可能ですが、有料となっています。最近では多くの有名企業の開発現場でGitHubを使用してチーム開発を行っています。日本での実績をご覧になりたい方は下記サイトをご覧ください。

GitHub Japan
後ほど、GitHubへプッシュする方法を学びます。

5. GitのGUIクライアント「SourceTree」

SourceTreeはWindowsでもMacでも無料で使える高機能のGitクライアントツールです。上記で説明してきたGitはそのまま扱おうとすると、コンソール画面で複数のコマンドを打って管理をしていく必要が出てきます。
バージョン管理をするために、Gitの概念や流れの理解に加え、コマンドまで覚えなければならないので、単純に時間とエネルギーがかかります。
しかし、SourceTreeを使うと非エンジニア（Webデザイナーやプログラミング初心者）でも直感的にGitを操作することができ、コマンドもたくさん覚える必要がありません。

基本的なバージョン管理は、Gitの考え方と同様なので

リポジトリを作成・複製する
ファイルの作成・編集を行う
ファイルの作成・変更・削除をステージングに追加する
変更結果をローカルリポジトリにコミットする
ローカルリポジトリをプッシュしてリモートリポジトリへ反映させる
という流れは変わりません。
細かく解説すると流れはさらにいくつかあるのですが、本カリキュラムではこの手順で管理が可能ですので、この流れに沿って進めていきます。

ここまでの解説で、いろいろな言葉やツールが出てきましたが、一度に覚えることは難しいかもしれません。
繰り返しカリキュラムを読み返しながら理解を深めていきましょう。

これまでの解説を整理すると、Gitというバージョン管理システムをSourceTreeというGitクライアントツールで操作し、GitHubのリモートリポジトリにて作成するプロジェクトの管理を行っていく、ということになります。
個人でもチームでも開発の際にはバックアップなどの対応が必要不可欠ですが、バージョン管理をすることによってプロジェクトをバックアップすることなく、いつでも変更履歴をたどることができ、やり直しができます。
書類作成などの作業を進めている最中に保存をし忘れて1時間分の作業が水の泡になった経験はみなさん一度はあるのではないでしょうか。バージョン管理は、その保存する＝コミットする、と考えてもらって良いでしょう。こまめにコミットをすることで、データの履歴を時系列で保存し、作業が一区切りついたらプッシュして完成に近づけていく。この繰り返しを経て、1つのゲームやサービス、プロダクトを完成させていきます。

バージョン管理の大切さを学習しましたので、次からはいよいよUnityで作ったプロジェクトのバージョン管理を実際に行っていきましょう。

6. UnityプロジェクトをGitHubにプッシュしよう

それでは、早速Unityで作ったプロジェクトのバージョン管理を実践しましょう。

6.1 Unityでプロジェクトの設定

まず、Unityプロジェクトの設定を行います。
Lesson2で作成した「AssetTest」プロジェクトに対し、Gitで管理するための設定を行います。Unityを起動して「AssetTest」プロジェクトを開きましょう。
プロジェクトが開いたら、下記の手順を行ってください。

メニュー → Edit → Project Settings → Editor

test_01.png

画面右にあるInspectorのEditor Settingsにて、
Version ControlのModeをVisible Meta Filesに変更します。
Asset SerializationのModeをForce Textに変更します。

test_02.png

すでに、その設定になっている場合は特に何もしなくて大丈夫です。
この作業が完了したら、Unityは一度閉じておきましょう。

6.2 GitHub上にリポジトリを作成

Lesson0でGitHubのアカウントを作成したかと思います。
学習システムのヘッダーにあるGitHubボタンをクリックしてGitHubページへ行きましょう。
もしくは、GitHubログインにアクセスしましょう。

GitHubボタン
test_03.png

GitHubのログイン情報を求められたらUsernameまたはメールアドレス、パスワードを入力してログインしましょう。

test_04.png

この画面が表示されたら、Start a projectをクリック、
または右上にある「+」マークをクリック → New Repositryで新しくリポジトリを作成しましょう。

後ほど解説しますが、今回はLesson2 Unityで遊んでみようにて無料Assetをインストールし作成したプロジェクトAssetTestプロジェクトを例にとり進めていきますので、Repositry nameをAssetTestにし、Create Repositoryをクリックしましょう。

test_05.png

そうすると、下記のような画面に遷移します。
ここがGitHub上に作られたリモートリポジトリAssetTestの管理ページのトップになります。

test_06.png

この画面に記載されているURLをメモしておきましょう。すぐ後の作業で使います。

6.3 リモートリポジトリとローカルリポジトリを連携させよう

GitHubで作ったAssetTestリポジトリ＝リモートリポジトリは作成できましたね。
それでは、ローカル（自分のPC）にローカルリポジトリを作成しリモートリポジトリにプッシュできる環境を整えましょう。

SourceTreeを立ち上げ、ローカルリポジトリを作成します。管理したいUnityプロジェクトを指定しましょう。今回は、Lesson2で作成したAsseTestプロジェクトのローカルリポジトリを作りましょう。

Macの場合

これから何度か出てくると思いますが、下記のような警告や判断を促すポップアップは許可にして大丈夫です。

test_18.png

フォルダごとSourceTreeにドラッグ＆ドロップしましょう。そうすると、下記のような表示になります。右端にある数字はファイルの数です。たくさんのファイルがこのAssetTestに入っていることがわかります。

test_19.png

test_07.png

Windowsの場合

左上にある新規/クローンを作成するをクリックすると、下記のような画面が出てきます。
リポジトリを作成タブを開きましょう。

test_win_01.png

test_win_02.png

保存先のパスの欄の右端にある…をクリックし、AssetTestプロジェクトのフォルダパスを指定して作成をクリックしましょう。

Macの場合、AssetTest部分をダブルクリックすると新しくウィンドウが開きます。

これがローカルリポジトリの中身です。Windowsでも同様のファイルが見えると思います。

test_22.png

それでは、先ほどGitHubで作ったリモートリポジトリとSourceTreeを連携させましょう。

test_20.png

右上端にある歯車マークをクリックします。ウィンドウが現れますので、リモートタブをクリックしましょう。

Mac

追加ボタンをクリックするとさらにウィンドウが出てきます。リモートの名前には、AssetTestと入力（リモートリポジトリ、ローカルリポジトリと同じ）、URL/パスには、先ほどGitHubでリポジトリを作った際にメモを残しておいたURLをコピーして入力しましょう。下記のようなものです。（必ず自分のアカウントのURLを使ってください）

https://github.com/SampleHikaruko/AssetTest.git
test_08.png

test_09.png

Windows

追加ボタンをクリックするとさらにウィンドウが出てきます。リモートの名前には、AssetTestと入力（リモートリポジトリ、ローカルリポジトリと同じ）、URL/パスには、先ほどGitHubでリポジトリを作った際にメモを残しておいたURLをコピーして入力しましょう。下記のようなものです。（必ず自分のアカウントのURLを使ってください）

https://github.com/SampleHikaruko/AssetTest.git
test_win_03.png

test_win_04.png

test_win_05.png

入力すると、リモートリポジトリのパスに一行追加されているのがわかります。OKを押しましょう。

また、このリポジトリの中にあるたくさんのファイルには管理不要なファイルが多く含まれています。
左のメニューにあるワークスペースに記載のある数字はファイルの数です。このままコミットすると無駄なファイルまで管理することになってしまいます。それらの管理不要なファイルを管理しないで済むよう特別な設定をしましょう。

test_10.png

6.4 除外リスト（.gitignore）の設定

先ほど確認しましたが、UnityのAssetTestプロジェクトにはたくさん不要なファイルがありました。それらをGitで管理しないよう.gitignoreを設定しましょう。
.gitignoreとは、無視するファイルを指定する設定です。

SourceTreeのリポジトリを開いた画面の右上端に歯車マークがありますのでそこをクリックしましょう。

test_20.png

Macの場合

高度な設定タブ → リポジトリ限定無視リストの編集をクリックします。

test_11.png

Windowsの場合

リポジトリ設定 → 詳細タブ → 編集をクリックします。

test_win_06.png

すると何かしらのテキストエディタが立ち上がると思います。もし、立ちあがらない場合は、テキストエディタで開くとすると立ち上がります。
下記の内容をすべてコピーして、テキストエディタにペーストし保存しましょう。
これらは、Unityで開発する際に生成されてしまう管理不要なファイルのパスや拡張子のリストです。

/[Ll]ibrary/
/[Tt]emp/
/[Oo]bj/
/[Bb]uild/
/[Bb]uilds/
/Assets/AssetStoreTools*

# Autogenerated VS/MD/Consulo solution and project files
ExportedObj/
.consulo/
*.csproj
*.unityproj
*.sln
*.suo
*.tmp
*.user
*.userprefs
*.pidb
*.booproj
*.svd


# Unity3D generated meta files
*.pidb.meta

# Unity3D Generated File On Crash Reports
sysinfo.txt

# Builds
*.apk
*.unitypackage
